name: CI/CD Pipeline - Deploy Remoto com SonarQube

on:
  push:
    branches: [ "main" ]

jobs:

  build-push:
    name: Build e Push das Imagens Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build da imagem Docker backend
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/stars-members-tracker:latest .

      - name: Push da imagem Docker backend para Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/stars-members-tracker:latest

      - name: Build da imagem Docker frontend
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/stars-members-tracker-frontend:latest .

      - name: Push da imagem Docker frontend para Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/stars-members-tracker-frontend:latest

  sonar-analysis:
    name: Análise de Código com SonarQube
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Node.js (necessário para projetos JS)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Iniciar SonarQube no servidor remoto
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop sonarqube || true
            docker rm sonarqube || true
            docker run -d --name sonarqube -p 8172:9000 sonarqube:lts-community
            echo "Aguardando SonarQube iniciar..."
            sleep 100

      - name: Download e Configuração do SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          echo "$GITHUB_WORKSPACE/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Análise do SonarQube
        run: |
          sonar-scanner \
            -Dsonar.projectKey=stars-members-tracker \
            -Dsonar.sources=. \
            -Dsonar.inclusions=*/.js \
            -Dsonar.host.url=http://201.23.3.86:8172 \
            -Dsonar.login=admin \
            -Dsonar.password=admin \
            -Dsonar.sourceEncoding=UTF-8

      - name: Parar e remover container SonarQube
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop sonarqube || true
            docker rm sonarqube || true
            sleep 30

  deploy-remote:
    name: Deploy Remoto via Docker Run
    runs-on: ubuntu-latest
    needs: sonar-analysis
    steps:
      - name: SSH para o servidor e deploy da nova versão
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            BACK_IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/stars-members-tracker:latest"
            FRONT_IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/stars-members-tracker-frontend:latest"
            DB_IMAGE="postgres:15-alpine"

            BACK_CONTAINER="stars-app"
            FRONT_CONTAINER="stars-front"
            DB_CONTAINER="stars-db"
            NETWORK_NAME="stars-network"

            docker network create $NETWORK_NAME || true
            docker rm -f $BACK_CONTAINER $FRONT_CONTAINER $DB_CONTAINER || true

            docker pull $BACK_IMAGE
            docker pull $FRONT_IMAGE
            docker pull $DB_IMAGE

            docker run -d --name $DB_CONTAINER --network $NETWORK_NAME --restart always \
              -e POSTGRES_USER=stars_user \
              -e POSTGRES_PASSWORD=stars_password \
              -e POSTGRES_DB=stars_db \
              -p 8175:5432 \
              -v postgres_data:/var/lib/postgresql/data \
              $DB_IMAGE

            echo "Aguardando o banco de dados iniciar..."
            sleep 15

            docker run -d --name $BACK_CONTAINER --network $NETWORK_NAME --restart always \
              -e DB_HOST=$DB_CONTAINER \ # <<< CORREÇÃO APLICADA AQUI
              -e DB_PORT=5432 \
              -e DB_USER=stars_user \
              -e DB_PASS=stars_password \
              -e DB_NAME=stars_db \
              -e APP_PORT=8170 \
              -p 8170:8170 \
              $BACK_IMAGE

            docker run -d --name $FRONT_CONTAINER --network $NETWORK_NAME --restart always \
              -p 8171:80 \
              $FRONT_IMAGE

            echo "-----------------------------------------------------"
            echo "Containers ativos:"
            docker ps
            echo "--