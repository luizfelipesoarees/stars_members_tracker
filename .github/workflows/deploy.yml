name: CI/CD Pipeline - Deploy com Docker Compose + SonarQube

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build e Push das Imagens Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build e Push da imagem do Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/stars-members-tracker-backend:latest

      - name: Build e Push da imagem do Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/stars-members-tracker-frontend:latest

  sonar-analysis:
    name: Análise de Código com SonarQube
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Iniciar SonarQube no servidor remoto
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker rm --force sonar_stars || true
            docker run -d --name sonar_stars -p 8173:9000 sonarqube:lts-community
            echo "Aguardando SonarQube iniciar..."
            sleep 100

      - name: Análise Backend com SonarScanner CLI
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/usr/src" \
            -w /usr/src/backend \
            sonarsource/sonar-scanner-cli \
            sonar-scanner \
              -Dsonar.projectKey=stars-api \
              -Dsonar.sources=. \
              -Dsonar.host.url=http://${{ secrets.REMOTE_HOST }}:8173 \
              -Dsonar.login=admin \
              -Dsonar.password=admin \
              -Dsonar.qualitygate.wait=true \
              -Dsonar.sourceEncoding=UTF-8

      - name: Análise Frontend com SonarScanner CLI
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/usr/src" \
            -w /usr/src/frontend \
            sonarsource/sonar-scanner-cli \
            sonar-scanner \
              -Dsonar.projectKey=stars-front \
              -Dsonar.sources=. \
              -Dsonar.host.url=http://${{ secrets.REMOTE_HOST }}:8173 \
              -Dsonar.login=admin \
              -Dsonar.password=admin \
              -Dsonar.qualitygate.wait=true \
              -Dsonar.sourceEncoding=UTF-8

      - name: Parar SonarQube
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: docker rm --force sonar_stars || true

  deploy:
    name: Deploy no Servidor com Docker Compose
    runs-on: ubuntu-latest
    needs: sonar-analysis
    steps:
      - name: Copiar docker-compose.yml para o servidor e executar deploy
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ./docker-compose.yml
          target: ~/stars/docker-compose.yml

      - name: Rodar docker-compose no servidor
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/stars
            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker ps
