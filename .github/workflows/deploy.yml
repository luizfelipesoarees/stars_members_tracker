name: Deploy Automatizado

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: seuusuario/deploy-automatizado
      REMOTE_USER: aluno
      REMOTE_HOST: 201.23.3.86
      CONTAINER_NAME: deploy_app

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Login no Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build da imagem
      run: docker build -t $DOCKER_IMAGE .

    - name: Push da imagem para Docker Hub
      run: docker push $DOCKER_IMAGE

    - name: Copiar código para o servidor
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "."
        target: "~/deployAutomatizado"

    - name: Executar análise com SonarQube no servidor remoto
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker run -d --name sonar -p 9000:9000 sonarqube:community
          sleep 60 # Aguarda o SonarQube iniciar
          cd ~/deployAutomatizado
          sonar-scanner \
            -Dsonar.projectKey=deploy-automatizado \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=admin \
            -Dsonar.password=admin
          docker stop sonar && docker rm sonar

    - name: Verificar resultado do SonarQube
      run: echo "⚠️ Insira aqui um passo para verificar a aprovação da análise (manual ou via API)"

    - name: Deploy remoto via SSH
      if: success()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker stop $CONTAINER_NAME || true && docker rm $CONTAINER_NAME || true
          docker pull $DOCKER_IMAGE
          docker run -d --name $CONTAINER_NAME -p 3000:3000 $DOCKER_IMAGE
